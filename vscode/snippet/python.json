{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"nCr": {
		"prefix": "def ncr comb",
		"body": [
			"def nCr(n, r, mod=10**9+7):",
			"\tr = min(r, n-r)",
			"\tnumer = denom = 1",
			"\tfor i in range(1, r+1):",
			"\t\tnumer = numer * (n+1-i) % mod",
			"\t\tdenom = denom * i % mod",
			"\treturn numer * pow(denom, mod-2, mod) % mod"
		],
		"description": "組み合わせ(nCr)"
	},

	"gcd lcm": {
		"prefix": "def gcd 最大 公約数",
		"body": [
			"def gcd(a, b):",
			"\tif a < b:",
			"\t\ta, b = b, a",
			"\twhile a % b != 0:",
			"\t\ta, b = b, a % b",
			"\treturn b",
			"\n",
			"def lcm(a):",
			"\tx = a[0]",
			"\tfor i in range(1, len(a)):",
			"\t\tx = x * a[i] // gcd(x, a[i])",
			"\treturn x"
		],
		"description": "最大公約数、最小公倍数"
	},

	"make divisors": {
		"prefix": "def divisor 約数 リスト",
		"body": [
			"def make_divisors(n):",
			"\tdivisors = []",
			"\tfor i in range(1, int(n**0.5)+1):",
			"\t\tif n % i == 0:",
			"\t\t\tdivisors.append(i)",
			"\t\t\tif i != n // i:",
			"\t\t\t\tdivisors.append(n//i)",
			"\treturn divisor",
		],
		"description": "最大公約数、最小公倍数"
	},


	"is_prime": {
		"prefix": "def isprime 素数",
		"body": [
			"def is_prime(n):",
			"\tif n == 1:",
			"\t\treturn False",
			"\tfor k in range(2, int(math.sqrt(n)) + 1):",
			"\t\tif n % k == 0:",
			"\t\t\treturn False",
			"\treturn True",
		],
		"description": "素数判定"
	},

	"itertools": {
		"prefix": "itertools 組み合わせ",
		"body": [
			"# 3文字の順列、組み合わせを求める",
			"data = [1, 2, 3, 4, 5]",
			"r = 3",
			"",
			"# 重複あり順列",
			"print(list(itertools.product(data, repeat=r)))",
			"",
			"# 重複なし順列",
			"print(list(itertools.permutations(data, r)))",
			"",
			"# 重複あり組み合わせ",
			"print(list(itertools.combinations_with_replacement(data, r)))",
			"",
			"# 重複なし組み合わせ",
			"print(list(itertools.combinations(data, r)))",
		],
		"description": "itertools"
	},

	"unionfind": {
		"prefix": "union find",
		"body": [
			"def find_root(x):",
			"\tif parent[x] == x:",
			"\t\treturn x",
			"\telse:",
			"\t\treturn find_root(parent[x])",
			"",
			"def unite(x, y):",
			"\t'''x,yの属する集合の併合'''",
			"\tx = find_root(x)",
			"\ty = find_root(y)",
			"",
			"\tif x != y:",
			"\t\tif rank[x] < rank[y]:",
			"\t\t\tparent[x] = y",
			"\t\t\tsize[y] += size[x]",
			"\t\telse:",
			"\t\t\tparent[y] = x",
			"\t\t\tsize[x] += size[y]",
			"\t\t\tif rank[x] == rank[y]:",
			"\t\t\t\trank[x] += 1",
			"",
			"def same(x, y):",
			"\t'''xとyが同じグループかどうか判定'''",
			"\treturn find_root(x) == find_root(y)",
			"",
			"def group_size(x):",
			"\t'''xが所属するグループのサイズ'''",
			"\treturn size[find_root(x)]",
			"",
			"def roots():",
			"\t'''rootリストを返す'''",
			"\troots = []",
			"\tfor i in range(N):",
			"\t\troots.append(find_root(i))",
			"\treturn roots",
			"",
			"def group_count():",
			"\t'''グループの数'''",
			"\treturn len(set(roots()))",
			"",
			"# 入力",
			"N, M = map(int, input().split())",
			"ab = [list(map(int, input().split())) for _ in range(M)]",
			"",
			"# 初期化",
			"parent = [i for i in range(N)]  # 根",
			"rank = [1] * N  # 深さ",
			"size = [1] * N  # iを根とするグループのサイズ",
			"",
			"# 前処理 (問題によって、適宜変える）",
			"edge = [[ab[M - 1 - i][0] - 1, ab[M - 1 - i][1] - 1] for i in range(M)]",
			"",
			"# 結合",
			"for i in range(M):",
			"\tunite(edge[i][0], edge[i][1])",
		],
		"description": "組み合わせ(nCr)"
	},

	"sys recursion limit": {
		"prefix": "sys recursion limit 再帰",
		"body": [
			"import sys",
			"input = sys.stdin.readline",
			"sys.setrecursionlimit(10**6)",
		],
		"description": "再帰上限設定"
	},
}
